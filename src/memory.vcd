$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 , clk_i $end
  $var wire 1 - rst_i $end
  $var wire 2 . address_i [1:0] $end
  $var wire 1 / we_i $end
  $var wire 32 0 data_i [31:0] $end
  $var wire 32 1 data_o [31:0] $end
  $scope module hippo_memory_InstantiateMemory $end
   $var wire 1 , clk_i $end
   $var wire 1 - rst_i $end
   $var wire 2 . address_i [1:0] $end
   $var wire 1 / we_i $end
   $var wire 32 0 data_i [31:0] $end
   $var wire 32 1 data_o [31:0] $end
   $scope module mem $end
    $var wire 32 7 AddrWidth [31:0] $end
    $var wire 1 8 Writeable $end
    $var wire 1 , clk_i $end
    $var wire 1 - rst_i $end
    $var wire 2 . address_i [1:0] $end
    $var wire 1 / we_i $end
    $var wire 32 0 data_i [31:0] $end
    $var wire 32 1 data_o [31:0] $end
    $var wire 32 # memory[0] [31:0] $end
    $var wire 32 $ memory[1] [31:0] $end
    $var wire 32 % memory[2] [31:0] $end
    $var wire 32 & memory[3] [31:0] $end
   $upscope $end
  $upscope $end
  $scope module test_arb $end
   $var wire 1 2 clk $end
   $var wire 1 3 rst $end
   $var wire 2 4 address [1:0] $end
   $var wire 1 5 we $end
   $var wire 32 6 data_i [31:0] $end
   $var wire 32 ' data_o [31:0] $end
   $scope module mem_dut $end
    $var wire 32 7 AddrWidth [31:0] $end
    $var wire 1 9 Writeable $end
    $var wire 1 2 clk_i $end
    $var wire 1 3 rst_i $end
    $var wire 2 4 address_i [1:0] $end
    $var wire 1 5 we_i $end
    $var wire 32 6 data_i [31:0] $end
    $var wire 32 ' data_o [31:0] $end
    $var wire 32 ( memory[0] [31:0] $end
    $var wire 32 ) memory[1] [31:0] $end
    $var wire 32 * memory[2] [31:0] $end
    $var wire 32 + memory[3] [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
0,
0-
b00 .
0/
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
02
03
b00 4
05
b00000000000000000000000000000000 6
b00000000000000000000000000000010 7
08
19
#10
b11011110101011011011111011101111 (
b00010010001101000101011001111000 )
b10000111011001010100001100100001 *
12
#15
13
#20
02
#30
b11011110101011011011111011101111 '
12
#40
02
#50
12
#60
02
